name: Go and Rust LLI App CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      go-version: ${{ steps.set-output.outputs.go-version }}
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      id: go-setup
      with:
        go-version: 1.21.3

    - name: Set output
      id: set-output
      run: echo "::set-output name=go-version::${{ steps.go-setup.outputs.version }}"

    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true

  build:
    needs: setup
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ needs.setup.outputs.go-version }}

    - name: Generate Go files with `go generate`
      run: go generate ./...

    - name: Build Go Application
      run: go build -v ./...

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ needs.setup.outputs.go-version }}

    - name: Test Go Application
      run: go test -v ./...
    
    - name: Generate Test Coverage
      run: go test -v -coverprofile=coverage.txt ./...

  codecov:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Upload Coverage Report to Codecov
      uses: codecov/codecov-action@v2
      with:
        file: ./coverage.txt
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true
